--DOMINIO PRIMARY KEY
CREATE DOMAIN DMN_PRIMARY_KEY INTEGER NOT NULL;

--DOMINIO DESCRICAO
CREATE DOMAIN DMN_DESCRICAO_100 VARCHAR(100);

--TABELA CLIENTE
CREATE TABLE TBLCLI (
	id DMN_PRIMARY_KEY,
	nome DMN_DESCRICAO_100,
	cpf VARCHAR(20) NOT NULL,
	cnpj VARCHAR(30) NOT NULL,
	data_nascimento DATE,
	ativo BOOLEAN,
	CONSTRAINT PK_CLIENTE PRIMARY KEY(id, cpf, cnpj)
);

--TABELA PRODUTO CATEGORIA
CREATE TABLE TBLPROCAT (
	id DMN_PRIMARY_KEY,
	categoria VARCHAR(50),
	CONSTRAINT PK_PRODUTOCATEGORIA PRIMARY KEY(id)
);

--TABELA PRODUTO
CREATE TABLE TBLPRO (
	id DMN_PRIMARY_KEY,
	nome DMN_DESCRICAO_100,
	descricao VARCHAR(255),
	quantidade INTEGER,
	preco_custo DOUBLE PRECISION,
	preco_venda DOUBLE PRECISION,
	id_categoria INTEGER,
	ativo BOOLEAN,
	CONSTRAINT PK_PRODUTO PRIMARY KEY(id),
	CONSTRAINT FK_PRODUTOCATEGORIA FOREIGN KEY(id_categoria) REFERENCES TBLPROCAT(id)
);

--TABELA USUARIOS PERFIL
CREATE TABLE TBLUSUPER (
	id DMN_PRIMARY_KEY,
	perfil VARCHAR(20),
	CONSTRAINT PK_USUARIOPERFIL PRIMARY KEY(id)
);

--TABELA USUARIOS
CREATE TABLE TBLUSU (
	id DMN_PRIMARY_KEY,
	nome DMN_DESCRICAO_100,
	matricula VARCHAR(20),
	data_contratacao DATE,
	id_perfil INTEGER,
	ativo BOOLEAN,
	CONSTRAINT PK_USUARIO PRIMARY KEY(id),
	CONSTRAINT FK_USUARIOPERFIL FOREIGN KEY(id_perfil) REFERENCES TBLUSUPER(id)
);

--TABELA VENDAS
CREATE TABLE TBLVEN (
	id DMN_PRIMARY_KEY,
	id_cliente INTEGER,
	cpf_cliente VARCHAR(20),
	cnpj_cliente VARCHAR(30),
	id_usuario INTEGER,
	id_produto INTEGER,
	quantidade_produtos INTEGER,
	valor_total DOUBLE PRECISION,
	desconto DOUBLE PRECISION,
	forma_pagamento VARCHAR(30),
	data_venda DATE,
	hora_venda TIME,
	CONSTRAINT PK_VENDA PRIMARY KEY(id),
	CONSTRAINT FK_CLIENTEVENDA FOREIGN KEY(id_cliente, cpf_cliente, cnpj_cliente) REFERENCES TBLCLI(id, cpf, cnpj),
	CONSTRAINT FK_USUARIOVENDA FOREIGN KEY(id_usuario) REFERENCES TBLUSU(id),
	CONSTRAINT FK_PRODUTOVENDA FOREIGN KEY(id_produto) REFERENCES TBLPRO(id)
);

--TABELA FORNECEDOR
CREATE TABLE TBLFOR (
	id DMN_PRIMARY_KEY,
	razao DMN_DESCRICAO_100,
	cnpj VARCHAR(30) NOT NULL,
	CONSTRAINT PK_FORNECEDOR PRIMARY KEY(id, cnpj)
);

--TABELA COMPRAS
CREATE TABLE TBLCOM (
	id DMN_PRIMARY_KEY,
	id_fornecedor INTEGER,
	cnpj_fornecedor VARCHAR(30),
	id_produto INTEGER,
	quantidade_produtos INTEGER,
	valor_total DOUBLE PRECISION,
	forma_pagamento VARCHAR(30),
	data_compra DATE,
	hora_compra TIME,
	CONSTRAINT PK_COMPRA PRIMARY KEY(id),
	CONSTRAINT FK_FORNECEDORCOMPRA FOREIGN KEY(id_fornecedor, cnpj_fornecedor) REFERENCES TBLFOR(id, cnpj),
	CONSTRAINT FK_PRODUTOCOMPRA FOREIGN KEY(id_produto) REFERENCES TBLPRO(id)
);

--CRIAÇÃO TRIGGER AUTO INCREMENT

CREATE SEQUENCE ID_TBLCLI;
CREATE SEQUENCE ID_TBLCOM;
CREATE SEQUENCE ID_TBLFOR;
CREATE SEQUENCE ID_TBLPRO;
CREATE SEQUENCE ID_TBLPROCAT;
CREATE SEQUENCE ID_TBLUSU;
CREATE SEQUENCE ID_TBLUSUPER;
CREATE SEQUENCE ID_TBLVEN;

SET TERM !! ;

CREATE TRIGGER TBLCLI_AUTOINCREMENT FOR TBLCLI
ACTIVE BEFORE INSERT POSITION 0 AS
BEGIN
	IF (NEW.id IS NULL) THEN NEW.id = NEXT VALUE FOR ID_TBLCLI;
END!!

CREATE TRIGGER TBLCOM_AUTOINCREMENT FOR TBLCOM
ACTIVE BEFORE INSERT POSITION 0 AS
BEGIN
	IF (NEW.id IS NULL) THEN NEW.id = NEXT VALUE FOR ID_TBLCOM;
END!!

CREATE TRIGGER TBLPRO_AUTOINCREMENT FOR TBLPRO
ACTIVE BEFORE INSERT POSITION 0 AS
BEGIN
	IF (NEW.id IS NULL) THEN NEW.id = NEXT VALUE FOR ID_TBLPRO;
END!!

CREATE TRIGGER TBLFOR_AUTOINCREMENT FOR TBLFOR
ACTIVE BEFORE INSERT POSITION 0 AS
BEGIN
	IF (NEW.id IS NULL) THEN NEW.id = NEXT VALUE FOR ID_TBLFOR;
END!!

CREATE TRIGGER TBLPROCAT_AUTOINCREMENT FOR TBLPROCAT
ACTIVE BEFORE INSERT POSITION 0 AS
BEGIN
	IF (NEW.id IS NULL) THEN NEW.id = NEXT VALUE FOR ID_TBLPROCAT;
END!!

CREATE TRIGGER TBLUSU_AUTOINCREMENT FOR TBLUSU
ACTIVE BEFORE INSERT POSITION 0 AS
BEGIN
	IF (NEW.id IS NULL) THEN NEW.id = NEXT VALUE FOR ID_TBLUSU;
END!!

CREATE TRIGGER TBLUSUPER_AUTOINCREMENT FOR TBLUSUPER
ACTIVE BEFORE INSERT POSITION 0 AS
BEGIN
	IF (NEW.id IS NULL) THEN NEW.id = NEXT VALUE FOR ID_TBLUSUPER;
END!!

CREATE TRIGGER TBLVEN_AUTOINCREMENT FOR TBLVEN
ACTIVE BEFORE INSERT POSITION 0 AS
BEGIN
	IF (NEW.id IS NULL) THEN NEW.id = NEXT VALUE FOR ID_TBLVEN;
END!!

SET TERM ; !!

--CRIACAO DE PROCEDURES
SET TERM !! ;

CREATE EXCEPTION EXC_TABELA_INVALIDA 'Tabela inválida. Permitidas: TBLCLI, TBLPRO, TBLUSU.'!!

CREATE PROCEDURE ValorTotalProdutos (quantidade INTEGER, valor_produto DOUBLE PRECISION)
RETURNS (valor_total DOUBLE PRECISION) AS
BEGIN
	valor_total = quantidade * valor_produto;
END!!

CREATE PROCEDURE AlternarAtivacao (sTabela VARCHAR(20), nID INTEGER)
AS
DECLARE VARIABLE SQL_STATEMENT VARCHAR(255);
BEGIN
    IF (sTabela NOT IN ('TBLCLI', 'TBLPRO', 'TBLUSU')) THEN
    BEGIN
        EXCEPTION EXC_TABELA_INVALIDA;
    END
	
	SQL_STATEMENT = 'UPDATE ' || sTabela || ' SET ativo = NOT ativo' || ' WHERE id = ' || nID || ';';
	EXECUTE STATEMENT SQL_STATEMENT;
END!!

SET TERM ; !!

--CRIACAO DE TRIGGERS
SET TERM !! ;

CREATE TRIGGER TRG_ATUALIZA_ESTOQUE
AFTER INSERT ON TBLVEN
AS
BEGIN
    UPDATE TBLPRO
    SET TBLPRO.quantidade = TBLPRO.quantidade - NEW.quantidade_produtos
    WHERE TBLPRO.id = NEW.id_produto;
END!!

CREATE TRIGGER TRG_CALCULA_VALOR_TOTAL_VENDA
BEFORE INSERT OR UPDATE ON TBLVEN
AS
DECLARE VARIABLE nPreco DOUBLE PRECISION;
BEGIN
    SELECT preco_venda 
    FROM TBLPRO
    WHERE TBLPRO.id = NEW.id_produto
    INTO :nPreco;

    NEW.valor_total = NEW.quantidade_produtos * nPreco;
	
END!!

SET TERM ; !!

--INSERT INTO

SET TERM !! ;

EXECUTE BLOCK AS
DECLARE i INTEGER = 1;
BEGIN
    WHILE (:i <= 40) DO
    BEGIN
		INSERT INTO TBLCLI(nome, cpf, cnpj, data_nascimento, ativo) VALUES
		('Cliente ' || :i, '123456789', '123456789', '2000-01-01', TRUE);
		
		INSERT INTO TBLPROCAT(categoria) VALUES
		('Categoria ' || :i);
	
		INSERT INTO TBLPRO(nome, descricao, quantidade, preco_custo, preco_venda, ativo) VALUES
		('Produto ' || :i, 'Descricao ' || :i, :i, :i * 10.0, :i * 15.0, TRUE);

		INSERT INTO TBLUSUPER(perfil) VALUES
		('Perfil ' || :i);

		INSERT INTO TBLUSU(nome, matricula, data_contratacao, id_perfil, ativo) VALUES
		('Usuário ' || :i, '123456789', '2025-01-01', :i, TRUE);
		
		INSERT INTO TBLFOR(razao, cnpj) VALUES
		('Fornecedor ' || :i, '123456789');

		INSERT INTO TBLCOM(id_fornecedor, cnpj_fornecedor, id_produto, quantidade_produtos, forma_pagamento, data_compra, hora_compra) VALUES
		(:i, '123456789', :i, :i, 'Cartão de Crédito', '2025-03-03', '00:00:00.0000');

		INSERT INTO TBLVEN(cpf_cliente, cnpj_cliente, id_cliente, id_usuario, id_produto, quantidade_produtos, desconto, forma_pagamento, data_venda, hora_venda) VALUES
		('123456789', '123456789', :i, :i, :i, :i, 0, 'Cartão de Crédito', '2025-03-03', '00:00:00.0000');

        :i = :i + 1;
    END
END!!

SET TERM ; !!

--DELETE 5 REGISTROS

SET TERM !! ;

EXECUTE BLOCK AS
DECLARE i INTEGER = 1;
BEGIN
	WHILE (:i <= 40) DO
	BEGIN
		DELETE FROM TBLVEN WHERE id = :i;
		DELETE FROM TBLCOM WHERE id = :i;
		DELETE FROM TBLCLI WHERE id = :i;
		DELETE FROM TBLPRO WHERE id = :i;
		DELETE FROM TBLPROCAT WHERE id = :i;
		DELETE FROM TBLUSU WHERE id = :i;
		DELETE FROM TBLUSUPER WHERE id = :i;
		DELETE FROM TBLFOR WHERE id = :i;

		IF (:i = 1) THEN :i = 0;
		:i = :i + 10;
	END
END!!

SET TERM ; !!


/* TODOS OS SELECTS COM JOINS REALIZADOS ABAIXO

--INNER JOIN RELATORIO DE VENDAS COM NOME DO CLIENTE E DESCRICAO DO PRODUTO

SELECT v.id AS venda_id, 
       c.nome AS cliente, 
       p.descricao AS produto, 
       v.quantidade_produtos, 
       v.valor_total
FROM TBLVEN v
INNER JOIN TBLCLI c ON v.id_cliente = c.id
INNER JOIN TBLPRO p ON v.id_produto = p.id;

--LEFT JOIN RELATORIO DE CLIENTES QUE FIZERAM COMPRA OU NAO

SELECT c.id AS cliente_id, 
       c.nome, 
       v.id AS venda_id, 
       v.valor_total
FROM TBLCLI c
LEFT JOIN TBLVEN v ON c.id = v.id_cliente;

--RIGHT JOIN RELATORIO DE PRODUTOS VENDIDOS CATEGORIZADOS OU NAO

SELECT p.id AS produto_id, 
       p.descricao, 
       cat.categoria AS categoria
FROM TBLPRO p
RIGHT JOIN TBLPROCAT cat ON p.id_categoria = cat.id;

--FULL JOIN RELATORIO DE FORNECEDORES E COMPRAS REALIZADAS

SELECT f.id AS fornecedor_id, 
       f.razao AS fornecedor, 
       c.id AS compra_id, 
       c.valor_total
FROM TBLFOR f
FULL JOIN TBLCOM c ON f.id = c.id_fornecedor;

--CROSS JOIN COMBINACAO DE TODOS OS CLIENTES E PRODUTOS

SELECT c.nome AS cliente, 
       p.descricao AS produto
FROM TBLCLI c
CROSS JOIN TBLPRO p;
*/